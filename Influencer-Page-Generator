/**
 * Google Apps Script to automate blog post creation in WordPress using Gemini API.
 *
 * Instructions for Implementation:
 *
 * 1.  **Open Google Apps Script:**
 *     - Go to script.google.com or open your Google Sheet, go to Extensions > Apps Script.
 *
 * 2.  **Paste the Code:**
 *     - Replace any existing code in the script editor with the code provided below.
 *
 * 3.  **Configure Credentials (IMPORTANT - Use Script Properties for Security):**
 *     - **Strongly Recommended:** Store your sensitive credentials securely using Script Properties.
 *       - Go to `File > Project properties > Script properties`.
 *       - Click `Add row`.
 *       - Add the following properties and their corresponding values:
 *         - `WORDPRESS_URL`: Your WordPress site's REST API base URL (e.g., `https://yourwebsite.com/wp-json`). Note: This script appends `/wp/v2` or `/wp/v2/media` etc.
 *         - `WORDPRESS_USER`: Your WordPress username (usually email).
 *         - `WORDPRESS_APP_PASSWORD`: Your WordPress Application Password (NOT your regular password). Generate this in your WordPress dashboard under Users > Your Profile > Application Passwords.
 *         - `GEMINI_API_KEY`: Your Google Gemini API Key.
 *       - Click `Save script properties`.
 *     - **This script is configured to ONLY use Script Properties.** Hardcoding is not supported in this version for security reasons.
 *
 * 4.  **Configure Script Constants:**
 *     - Update `POST_TYPE_TO_CREATE` if your CPT slug is different from 'influencers'.
 *     - Update `POST_STATUS` if you want posts to be 'draft' or 'pending' instead of 'publish'.
 *     - Update `GEMINI_MODEL` if you want to use a different Gemini model (ensure it's compatible and available).
 *     - Update `PLACEHOLDER_PROFILE_PIC` if you have a different default image URL.
 *     - Adjust `UPLOAD_DELAY_MS` if needed to avoid hitting server limits during uploads.
 *
 * 5.  **Configure Form Question Titles (CRITICAL):**
 *     - **Update ALL `FORM_QUESTION_...` constants** to EXACTLY match the question titles in your Google Form. Case and spelling must be perfect.
 *     - Ensure your form includes questions for all the constants defined, especially the file upload questions (`FORM_QUESTION_PROFILE_PIC`, `FORM_QUESTION_GALLERY_IMAGES`, `FORM_QUESTION_VIDEO_UPLOAD_1`, `FORM_QUESTION_VIDEO_UPLOAD_2`) and their corresponding link questions (`FORM_QUESTION_VIDEO_LINK_1`, `FORM_QUESTION_VIDEO_LINK_2`).
 *
 * 6.  **Bind the Script to Your Google Form:**
 *     - Open the Google Form you want to use.
 *     - Go to the three-dot menu in the top right (`More`).
 *     - Select `Script editor`. This will create a new script project bound to this form.
 *     - Paste the code into this new script project, replacing any default code.
 *
 * 7.  **Set up the Form Submit Trigger:**
 *     - In the Apps Script editor (for the script bound to your form), select the `createFormSubmitTrigger` function from the dropdown menu next to the Run button.
 *     - Click the `Run` button (play icon).
 *     - You will be asked to authorize the script. Review the permissions (it needs access to the Form, Drive, external services) and authorize.
 *     - This function creates a trigger that automatically runs `onFormSubmit` whenever the form receives a new response.
 *     - You can verify the trigger exists by clicking the clock icon (`Triggers`) on the left sidebar.
 *     - If you need to remove the trigger later, run the `deleteTriggers` function.
 *
 * 8.  **Test the Form Submission:**
 *     - Submit a test response through your Google Form.
 *     - Check the `Executions` tab (list icon on the left sidebar) in the Apps Script editor to see if the `onFormSubmit` function ran successfully.
 *     - Check the `Logger` output (`View > Logs`) for detailed information, including any errors during uploads or API calls.
 *     - Check your WordPress site for the new CPT post.
 *
 * 9.  **Troubleshooting:**
 *     - **Missing Script Properties:** Ensure all required properties (`WORDPRESS_URL`, `WORDPRESS_USER`, `WORDPRESS_APP_PASSWORD`, `GEMINI_API_KEY`) are set correctly in `File > Project properties > Script properties`.
 *     - **Incorrect Form Question Titles:** Double-check that the `FORM_QUESTION_...` constants in the script exactly match your form's question titles.
 *     - **WordPress API Errors:** Check the Logger output for specific error codes and messages from WordPress (e.g., 401, 403, 404, rest_cannot_create). This often indicates incorrect credentials, insufficient user permissions, or an incorrect WP URL/CPT slug.
 *     - **Gemini API Errors:** Check the Logger output for errors from the Gemini API (e.g., 429 for rate limits, 400 for bad requests, content blocked).
 *     - **File Upload Issues:** Ensure the script has permission to access Google Drive files uploaded via the form. Check WordPress media settings for file size limits or allowed file types.
 *     - **Incomplete HTML:** If the generated HTML is cut off, check the Gemini API logs for `MAX_TOKENS` or `SAFETY` finish reasons. Adjust the prompt or `maxOutputTokens` if necessary, or review safety settings.
 */

// ========================================================================
// Influencer CPT Post Generator (Gemini HTML + Auto Images v4.0 - Linked Uploaded Videos) - Google Apps Script
// ========================================================================
// Purpose: Creates an 'influencers' CPT post based on Google Form submissions.
// Version: 4.0 - Uses uploaded videos linked to provided URLs (e.g., Insta Reels) (2024-05-23)
// ========================================================================

// --- Script Properties (Set in Project Settings -> Script Properties) ---
// REQUIRED: WORDPRESS_URL, WORDPRESS_USER, WORDPRESS_APP_PASSWORD, GEMINI_API_KEY
const SCRIPT_PROPS = PropertiesService.getScriptProperties();

// --- Configuration ---
const POST_TYPE_TO_CREATE = 'influencers';
const POST_STATUS = 'publish';
const GEMINI_MODEL = 'gemini-1.5-flash-latest';
const GEMINI_API_ENDPOINT = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent`;
const PLACEHOLDER_PROFILE_PIC = 'https://via.placeholder.com/180/CCCCCC/FFFFFF?text=Profile+Pic+Upload+Failed';
const UPLOAD_DELAY_MS = 500;

// --- Form Question Titles (MUST MATCH YOUR GOOGLE FORM EXACTLY) ---
const FORM_QUESTION_PROFILE_PIC = 'Profile Picture';
const FORM_QUESTION_GALLERY_IMAGES = 'Gallery Images (Optional)';
const FORM_QUESTION_INFLUENCER_NAME = 'Influencer Name';
const FORM_QUESTION_TAGLINE = 'Tagline / Short Bio';
const FORM_QUESTION_BRAND_COLOR = 'Brand Color (Optional)';
const FORM_QUESTION_ABOUT_ME = 'About Me Section';
const FORM_QUESTION_INSTAGRAM_URL = 'Instagram Profile URL';
const FORM_QUESTION_WHATSAPP_URL = 'WhatsApp Link';
const FORM_QUESTION_LINKEDIN_URL = 'LinkedIn Profile URL';
const FORM_QUESTION_TWITTER_URL = 'Twitter Profile URL';
const FORM_QUESTION_YOUTUBE_URL = 'YouTube Channel URL';
const FORM_QUESTION_PINTEREST_URL = 'Pinterest Profile URL';
const FORM_QUESTION_BEHANCE_URL = 'Behance Profile URL';
const FORM_QUESTION_TIKTOK_URL = 'TikTok Profile URL';
const FORM_QUESTION_WEBSITE_URL = 'Personal Website URL';
const FORM_QUESTION_CONTACT_EMAIL = 'Contact Email';
const FORM_QUESTION_YOUTUBE_VIDEO_URLS = 'Featured YouTube Video URLs (one per line)';
const FORM_QUESTION_VIDEO_UPLOAD_1 = 'Featured Video Upload 1';
const FORM_QUESTION_VIDEO_LINK_1 = 'Featured Video Link 1 (Instagram Reel URL)';
const FORM_QUESTION_VIDEO_UPLOAD_2 = 'Featured Video Upload 2';
const FORM_QUESTION_VIDEO_LINK_2 = 'Featured Video Link 2 (Instagram Reel URL)';
const FORM_QUESTION_CTA_HEADLINE = 'Call to Action Headline';
const FORM_QUESTION_CTA_TEXT = 'Call to Action Text (Optional)';
const FORM_QUESTION_CTA_BUTTON_TEXT = 'Call to Action Button Text';
const FORM_QUESTION_CTA_BUTTON_URL = 'Call to Action Button URL';

// ========================================================================
// Main Trigger Function
// ========================================================================
/**
 * Main function triggered by Google Form submission.
 * Orchestrates media uploads, HTML generation via Gemini, and WP CPT post creation.
 * @param {Object} e The event object containing form response data.
 */
function onFormSubmit(e) {
  const scriptStartTime = new Date();
  Logger.log(`--- ${scriptStartTime.toISOString()} | New Form Submission Trigger Fired (Gemini HTML + Auto Images v4.0 - Linked Uploaded Videos) ---`);

  Logger.log("Step 1: Validating Script Properties...");
  const WORDPRESS_URL = SCRIPT_PROPS.getProperty('WORDPRESS_URL');
  const WORDPRESS_USER = SCRIPT_PROPS.getProperty('WORDPRESS_USER');
  const WORDPRESS_APP_PASSWORD = SCRIPT_PROPS.getProperty('WORDPRESS_APP_PASSWORD');
  const GEMINI_API_KEY = SCRIPT_PROPS.getProperty('GEMINI_API_KEY');

  let hasError = false;
  if (!WORDPRESS_URL) { Logger.log("ERROR: Script property 'WORDPRESS_URL' is missing."); hasError = true; }
  if (!WORDPRESS_USER) { Logger.log("ERROR: Script property 'WORDPRESS_USER' is missing."); hasError = true; }
  if (!WORDPRESS_APP_PASSWORD) { Logger.log("ERROR: Script property 'WORDPRESS_APP_PASSWORD' is missing."); hasError = true; }
  if (!GEMINI_API_KEY) { Logger.log("ERROR: Script property 'GEMINI_API_KEY' is missing."); hasError = true; }

  if (hasError) {
    Logger.log("Halting execution due to missing script properties.");
    return;
  }
  Logger.log("Script properties validated successfully.");

  Logger.log("Step 2: Parsing Form Response...");
  if (!e || !e.response || typeof e.response.getItemResponses !== 'function') {
      Logger.log("ERROR: Event object 'e' or 'e.response' structure is invalid or missing 'getItemResponses'. Halting.");
      return;
  }
  let itemResponses;
  try {
      itemResponses = e.response.getItemResponses();
      if (!Array.isArray(itemResponses) || itemResponses.length === 0) {
           Logger.log("WARNING: No form data received or invalid response structure. Halting."); return;
       }
      Logger.log(`Successfully retrieved ${itemResponses.length} item responses.`);
  } catch (getResponseError) {
      Logger.log(`ERROR: Failed to get item responses: ${getResponseError}. Halting.`); return;
  }

  Logger.log("Step 3: Extracting Form Data and File IDs...");
  const formData = {};
  const fileUploads = {};
  itemResponses.forEach(itemResponse => {
    try {
        const questionTitle = itemResponse.getItem().getTitle();
        const answer = itemResponse.getResponse();
        if (itemResponse.getItem().getType() === FormApp.ItemType.FILE_UPLOAD) {
          fileUploads[questionTitle] = (Array.isArray(answer) && answer.length > 0) ? answer : (answer ? [answer] : []);
        } else {
          formData[questionTitle] = answer || '';
        }
    } catch (itemError) {
        Logger.log(`WARNING: Error processing one item response: ${itemError}`);
    }
  });
  Logger.log("Form data and file IDs extracted.");

  Logger.log("Step 4: Preparing WordPress Authentication...");
  let wpAuthHeader;
  try {
      wpAuthHeader = "Basic " + Utilities.base64Encode(WORDPRESS_USER + ":" + WORDPRESS_APP_PASSWORD);
      Logger.log('WordPress Auth Header prepared.');
  } catch (authError) {
      Logger.log(`ERROR: Failed to create WordPress Auth Header. Error: ${authError}. Halting.`);
      return;
  }
  const baseHeaders = { "Authorization": wpAuthHeader };


  Logger.log("Step 5: Uploading Profile Picture...");
  let profilePicUrl = PLACEHOLDER_PROFILE_PIC;
  const profilePicDriveIds = fileUploads[FORM_QUESTION_PROFILE_PIC] || [];
  if (profilePicDriveIds.length > 0) {
     const profilePicDriveId = profilePicDriveIds[0];
     Logger.log(`Attempting to upload profile picture (Drive ID: ${profilePicDriveId})...`);
     const uploadResult = uploadFileToWordPress(profilePicDriveId, baseHeaders, WORDPRESS_URL);
     if (uploadResult && uploadResult.url) {
         profilePicUrl = uploadResult.url;
         Logger.log(`Profile picture uploaded. URL: ${profilePicUrl}`);
     } else {
         Logger.log(`Profile picture upload failed for Drive ID: ${profilePicDriveId}. Using placeholder.`);
     }
  } else {
     Logger.log(`No profile picture provided. Using placeholder.`);
  }


  Logger.log("Step 6: Uploading Gallery Images...");
  const galleryUrls = [];
  const galleryDriveIds = fileUploads[FORM_QUESTION_GALLERY_IMAGES] || [];
  if (galleryDriveIds.length > 0) {
      Logger.log(`Found ${galleryDriveIds.length} gallery image(s) to upload...`);
      galleryDriveIds.forEach((fileId, index) => {
          if (index > 0 && UPLOAD_DELAY_MS > 0) Utilities.sleep(UPLOAD_DELAY_MS);
          Logger.log(`Uploading gallery image ${index + 1}/${galleryDriveIds.length} (Drive ID: ${fileId})...`);
          const galleryUploadResult = uploadFileToWordPress(fileId, baseHeaders, WORDPRESS_URL);
          if (galleryUploadResult && galleryUploadResult.url) {
              galleryUrls.push(galleryUploadResult.url);
              Logger.log(`Gallery image ${index + 1} uploaded. URL: ${galleryUploadResult.url}`);
          } else {
              Logger.log(`Gallery image ${index + 1} (Drive ID: ${fileId}) upload failed.`);
          }
      });
      Logger.log(`Finished gallery uploads. ${galleryUrls.length} out of ${galleryDriveIds.length} uploaded successfully.`);
  } else {
      Logger.log(`No gallery images provided.`);
  }

  Logger.log("Step 7: Uploading Featured Videos...");
  let uploadedVideoUrl1 = '';
  let uploadedVideoUrl2 = '';

  const video1DriveIds = fileUploads[FORM_QUESTION_VIDEO_UPLOAD_1] || [];
  if (video1DriveIds.length > 0) {
      const video1DriveId = video1DriveIds[0];
      Logger.log(`Attempting to upload featured video 1 (Drive ID: ${video1DriveId})...`);
      Utilities.sleep(UPLOAD_DELAY_MS);
      const video1UploadResult = uploadFileToWordPress(video1DriveId, baseHeaders, WORDPRESS_URL);
      if (video1UploadResult && video1UploadResult.url) {
          uploadedVideoUrl1 = video1UploadResult.url;
          Logger.log(`Featured video 1 uploaded. URL: ${uploadedVideoUrl1}`);
      } else {
          Logger.log(`Featured video 1 upload failed for Drive ID: ${video1DriveId}.`);
      }
  } else {
      Logger.log(`No video provided for "${FORM_QUESTION_VIDEO_UPLOAD_1}".`);
  }

  const video2DriveIds = fileUploads[FORM_QUESTION_VIDEO_UPLOAD_2] || [];
  if (video2DriveIds.length > 0) {
      const video2DriveId = video2DriveIds[0];
      Logger.log(`Attempting to upload featured video 2 (Drive ID: ${video2DriveId})...`);
      Utilities.sleep(UPLOAD_DELAY_MS);
      const video2UploadResult = uploadFileToWordPress(video2DriveId, baseHeaders, WORDPRESS_URL);
      if (video2UploadResult && video2UploadResult.url) {
          uploadedVideoUrl2 = video2UploadResult.url;
          Logger.log(`Featured video 2 uploaded. URL: ${uploadedVideoUrl2}`);
      } else {
          Logger.log(`Featured video 2 upload failed for Drive ID: ${video2DriveId}.`);
      }
  } else {
      Logger.log(`No video provided for "${FORM_QUESTION_VIDEO_UPLOAD_2}".`);
  }


  Logger.log("Step 8: Pre-generating Gallery HTML...");
  let galleryHtml = '';
  if (galleryUrls.length > 0) {
      galleryUrls.forEach(url => {
          try {
              const safeUrl = encodeURI(url);
              const safeAlt = (formData[FORM_QUESTION_INFLUENCER_NAME] || 'Gallery Image').replace(/"/g, '"').replace(/</g, '<').replace(/>/g, '>');
              galleryHtml += `<figure class="ilp-gallery-item"><img src="${safeUrl}" alt="${safeAlt}"></figure>\n`;
          } catch (htmlGenError) {
              Logger.log(`WARNING: Error generating img tag for URL ${url}: ${htmlGenError}`);
          }
      });
      Logger.log(`Generated HTML for ${galleryUrls.length} gallery images.`);
  } else {
      galleryHtml = '<p><i>No gallery images were provided or uploaded successfully.</i></p>';
      Logger.log("Generated placeholder text for gallery.");
  }


  Logger.log("Step 9: Preparing Text Data for Gemini Prompt...");
  const influencerName = formData[FORM_QUESTION_INFLUENCER_NAME] || 'Unnamed Influencer';
  const tagline = formData[FORM_QUESTION_TAGLINE] || '';
  const brandColor = formData[FORM_QUESTION_BRAND_COLOR] || '#4a90e2';
  const aboutMe = formData[FORM_QUESTION_ABOUT_ME] || '';
  const instagramUrl = formData[FORM_QUESTION_INSTAGRAM_URL] || '';
  const whatsappUrl = formData[FORM_QUESTION_WHATSAPP_URL] || '';
  const linkedinUrl = formData[FORM_QUESTION_LINKEDIN_URL] || '';
  const twitterUrl = formData[FORM_QUESTION_TWITTER_URL] || '';
  const youtubeUrl = formData[FORM_QUESTION_YOUTUBE_URL] || '';
  const pinterestUrl = formData[FORM_QUESTION_PINTEREST_URL] || '';
  const behanceUrl = formData[FORM_QUESTION_BEHANCE_URL] || '';
  const tiktokUrl = formData[FORM_QUESTION_TIKTOK_URL] || '';
  const websiteUrl = formData[FORM_QUESTION_WEBSITE_URL] || '';
  const contactEmail = formData[FORM_QUESTION_CONTACT_EMAIL] || '';
  const youtubeVideoUrlsRaw = formData[FORM_QUESTION_YOUTUBE_VIDEO_URLS] || '';
  const videoLink1 = formData[FORM_QUESTION_VIDEO_LINK_1] || '';
  const videoLink2 = formData[FORM_QUESTION_VIDEO_LINK_2] || '';
  const ctaHeadline = formData[FORM_QUESTION_CTA_HEADLINE] || 'Get In Touch';
  const ctaText = formData[FORM_QUESTION_CTA_TEXT] || '';
  const ctaButtonText = formData[FORM_QUESTION_CTA_BUTTON_TEXT] || 'Learn More';
  const ctaButtonUrl = formData[FORM_QUESTION_CTA_BUTTON_URL] || '#';

  Logger.log("Step 10: Constructing Gemini Prompt...");
  const htmlTemplate = `<!-- Generated by Influencer Page Generator Script v4.0 -->
    <div id="influencer-landing-page-v2" style="--ilp-brand-color: ${brandColor};">
        <div class="ilp-container">

            <header class="ilp-hero">
                <img src="{{PROFILE_PIC_URL}}" alt="{{INFLUENCER_NAME}} Profile Picture" class="ilp-profile-pic">
                <h1 class="ilp-influencer-name">{{INFLUENCER_NAME}}</h1>
                {{TAGLINE_HTML}}
            </header>

            {{ABOUT_ME_HTML}}

            <section class="ilp-social-links">
                <h2>Connect With Me</h2>
                <ul class="ilp-social-icons-list">
                    {{SOCIAL_LINKS_HTML}}
                </ul>
            </section>

            <section class="ilp-gallery">
                <h2>My Gallery</h2>
                <div class="ilp-gallery-grid">
                    {{GALLERY_HTML}}
                </div>
            </section>

            <section class="ilp-embedded-media">
                <h2>Featured Content</h2>
                <div class="ilp-media-grid">
                    {{YOUTUBE_EMBED_HTML}}
                    {{VIDEO_GALLERY_HTML}}
                </div>
            </section>

            <section class="ilp-cta">
                <h2 class="ilp-cta-headline">{{CTA_HEADLINE}}</h2>
                {{CTA_TEXT_HTML}}
                <a href="{{CTA_BUTTON_URL}}" class="ilp-cta-button" target="_blank">{{CTA_BUTTON_TEXT}}</a>
            </section>

        </div><!-- /.ilp-container -->

        <footer class="ilp-footer">
            <p>© <span class="ilp-current-year"></span> {{INFLUENCER_NAME}}. All Rights Reserved.</p>
        </footer>
    </div><!-- /#influencer-landing-page-v2 -->
  `;

  let prompt = `Generate complete HTML content for an influencer landing page based on the provided template and data. Replace the placeholders (like {{PLACEHOLDER}}) accurately with the corresponding data. Ensure the entire template structure, including the final CTA section and footer, is generated.

  **HTML Template:**
  \`\`\`html
  ${htmlTemplate}
  \`\`\`

  **Data:**
  *   Influencer Name: ${influencerName}
  *   Profile Picture URL: ${profilePicUrl}
  *   Tagline: ${tagline}
  *   About Me: ${aboutMe}
  *   Gallery HTML Block: ${galleryHtml}
  *   Instagram URL: ${instagramUrl}
  *   WhatsApp URL: ${whatsappUrl}
  *   LinkedIn URL: ${linkedinUrl}
  *   Twitter URL: ${twitterUrl}
  *   YouTube Channel URL: ${youtubeUrl}
  *   Pinterest URL: ${pinterestUrl}
  *   Behance URL: ${behanceUrl}
  *   TikTok URL: ${tiktokUrl}
  *   Website URL: ${websiteUrl}
  *   Contact Email: ${contactEmail}
  *   Featured YouTube Video URLs (raw, one per line): ${youtubeVideoUrlsRaw}
  *   Uploaded Video 1 URL: ${uploadedVideoUrl1}
  *   Link for Video 1 (e.g., Instagram Reel): ${videoLink1}
  *   Uploaded Video 2 URL: ${uploadedVideoUrl2}
  *   Link for Video 2 (e.g., Instagram Reel): ${videoLink2}
  *   CTA Headline: ${ctaHeadline}
  *   CTA Text: ${ctaText}
  *   CTA Button Text: ${ctaButtonText}
  *   CTA Button URL: ${ctaButtonUrl}
  *   Brand Color: ${brandColor}

  **Instructions:**
  1.  Replace ALL occurrences of {{INFLUENCER_NAME}} with the Influencer Name.
  2.  Replace {{PROFILE_PIC_URL}} with the exact Profile Picture URL provided.
  3.  If Tagline is provided, replace {{TAGLINE_HTML}} with '<p class="ilp-tagline">${tagline}</p>'. Otherwise, replace {{TAGLINE_HTML}} with an empty string.
  4.  If About Me is provided, replace {{ABOUT_ME_HTML}} with '<section class="ilp-about"><h2>About Me</h2><div class="ilp-about-content">${aboutMe}</div></section>'. Otherwise, replace {{ABOUT_ME_HTML}} with an empty string. Ensure the About Me content is treated as valid HTML (e.g., preserve paragraphs).
  5.  For {{SOCIAL_LINKS_HTML}}, generate '<li><a href="..." target="_blank" title="..." class="ilp-social-icon ilp-..."><i class="fab/fas fa-..."></i></a></li>' elements ONLY for the URLs/Email that are provided. Use appropriate Font Awesome icons. If Contact Email is provided, add a mailto link. If none, replace {{SOCIAL_LINKS_HTML}} with '<li>No social links provided.</li>'. Ensure URLs/mailto are properly escaped.
  6.  Replace {{GALLERY_HTML}} with the exact Gallery HTML Block provided.
  7.  For {{YOUTUBE_EMBED_HTML}}, process the 'Featured YouTube Video URLs (raw, one per line)' data. Split by newline. For **each** valid YouTube URL, extract the video ID and generate the standard YouTube iframe embed block: '<div class="ilp-media-item ilp-youtube-embed-container"><h3>Featured Video</h3><div class="ilp-responsive-iframe-container"><iframe src="https://www.youtube.com/embed/VIDEO_ID" ...></iframe></div></div>'. Concatenate blocks for all valid URLs. If none, replace {{YOUTUBE_EMBED_HTML}} with an empty string.
  8.  **[LINKED VIDEO GALLERY]** For {{VIDEO_GALLERY_HTML}}, process the pairs ('Uploaded Video 1 URL', 'Link for Video 1') and ('Uploaded Video 2 URL', 'Link for Video 2'). For **each pair** where the 'Uploaded Video URL' is present and looks like a valid web URL:
      *   Start building the HTML block: '<div class="ilp-media-item ilp-video-gallery-item"><h3>Featured Video</h3>'.
      *   Check if the corresponding 'Link for Video' URL is provided and looks valid (starts with http/https).
      *   If the 'Link for Video' IS valid, add an opening anchor tag: '<a href="[Link for Video URL]" target="_blank" rel="noopener noreferrer" title="Click to view original post" style="display: block; text-decoration: none; background-color: #000;">'. Replace '[Link for Video URL]' with the actual link.
      *   If the 'Link for Video' IS NOT valid or provided, add '<div style="background-color: #000;">' instead of the anchor tag.
      *   Generate the HTML5 video tag: '<video src="[Uploaded Video URL]" autoplay loop muted playsinline controlslist="nodownload" oncontextmenu="return false;" style="width: 100%; height: auto; display: block;" title="Featured Video"></video>'. Replace '[Uploaded Video URL]' with the actual URL of the uploaded video.
      *   If the 'Link for Video' IS valid, add the closing anchor tag: '</a>'.
      *   If the 'Link for Video' IS NOT valid or provided, add the closing div tag: '</div>'.
      *   Add the closing div for the media item: '</div>'.
      *   Concatenate the generated HTML blocks for **each** valid uploaded video processed.
      *   If neither 'Uploaded Video 1 URL' nor 'Uploaded Video 2 URL' is valid or provided, replace {{VIDEO_GALLERY_HTML}} with an empty string.
  9.  Replace {{CTA_HEADLINE}} with the CTA Headline.
  10. If CTA Text is provided, replace {{CTA_TEXT_HTML}} with '<p class="ilp-cta-text">${ctaText}</p>'. Otherwise, replace with an empty string.
  11. Replace {{CTA_BUTTON_TEXT}} with the CTA Button Text.
  12. Replace {{CTA_BUTTON_URL}} with the CTA Button URL. Ensure it's properly escaped for the href attribute.
  13. Ensure the Brand Color is correctly set in the main div's style attribute.
  14. **CRITICAL:** Ensure you generate the *entire* HTML structure as defined in the template, including all sections from the header down to the final 'ilp-cta' section and the 'ilp-footer'. Do not stop generation prematurely.
  15. Output ONLY the final, complete, valid HTML code, starting with '<!-- Generated by...' and ending with the final '</div>'. Do not include any extra explanations, comments (except the initial one), or markdown formatting like \`\`\`html. **Crucially, ensure the output includes the complete ilp-cta section and the ilp-footer.**
  `;
  Logger.log("Gemini prompt constructed.");


  Logger.log("Step 11: Calling Gemini API...");
  const generatedHtml = generateHtmlWithGemini(prompt, GEMINI_API_KEY);

  if (!generatedHtml) {
    Logger.log("ERROR: Failed to generate HTML content from Gemini. Halting.");
    return;
  }
  Logger.log("--- Successfully generated HTML from Gemini ---");


  Logger.log(`Step 12: Creating WordPress '${POST_TYPE_TO_CREATE}' CPT Post...`);
  const contentPayload = {
    title: influencerName,
    content: generatedHtml,
    status: POST_STATUS
  };

  Logger.log(`Attempting to create WordPress ${POST_TYPE_TO_CREATE} post titled: "${influencerName}"`);
  const newContentId = createWordPressCPTPost(contentPayload, POST_TYPE_TO_CREATE, baseHeaders, WORDPRESS_URL);

  if (newContentId) {
    Logger.log(`--- SUCCESS: WordPress ${POST_TYPE_TO_CREATE} post "${influencerName}" created with ID: ${newContentId}. ---`);
  } else {
    Logger.log(`--- FAILURE: Failed to create WordPress ${POST_TYPE_TO_CREATE} post "${influencerName}". Check logs above. ---`);
  }

  const scriptEndTime = new Date();
  const duration = (scriptEndTime.getTime() - scriptStartTime.getTime()) / 1000;
  Logger.log(`--- ${scriptEndTime.toISOString()} | onFormSubmit Execution Finished. Duration: ${duration} seconds ---`);
}


// ========================================================================
// Helper Function: Upload File to WordPress
// ========================================================================
/**
 * Uploads a file from Google Drive to the WordPress Media Library.
 * @param {string} fileId The Google Drive File ID.
 * @param {Object} headers WP Authentication headers.
 * @param {string} wordpressUrl The WordPress site URL.
 * @return {object|null} An object {id: mediaId, url: sourceUrl} on success, or null on failure.
 */
function uploadFileToWordPress(fileId, headers, wordpressUrl) {
  const funcName = "uploadFileToWordPress";
  if (!fileId || !headers || !headers.Authorization || !wordpressUrl) {
      Logger.log(`${funcName}: ERROR - Missing required parameters.`); return null;
  }

  let file, blob, fileName, contentType;
  try {
    file = DriveApp.getFileById(fileId);
    blob = file.getBlob();
    fileName = file.getName();
    contentType = blob.getContentType();
    Logger.log(`${funcName}: Processing file "${fileName}" (ID: ${fileId}, Type: ${contentType})`);
  } catch (driveError) {
    Logger.log(`${funcName}: ERROR accessing Google Drive file ID ${fileId}: ${driveError}`);
    return null;
  }

  if (!contentType || (!contentType.startsWith('image/') && !contentType.startsWith('video/'))) {
    Logger.log(`${funcName}: WARNING - Skipping upload for non-image/non-video type: ${fileName} (Type: ${contentType})`);
    return null;
  }

  const apiUrl = `${wordpressUrl.replace(/\/$/, '')}/wp-json/wp/v2/media`;
  const uploadHeaders = { ...headers, 'Content-Disposition': `attachment; filename="${fileName}"` };
  const options = {
      method: "post",
      headers: uploadHeaders,
      payload: blob,
      muteHttpExceptions: true,
      contentType: contentType
  };

  let response, responseCode, responseBody;
  try {
    Logger.log(`${funcName}: Attempting upload to ${apiUrl}`);
    response = UrlFetchApp.fetch(apiUrl, options);
    responseCode = response.getResponseCode();
    responseBody = response.getContentText();
  } catch (fetchError) {
      Logger.log(`${funcName}: EXCEPTION during fetch for "${fileName}": ${fetchError}`);
      return null;
  }

  if (responseCode === 201) {
    try {
        const jsonResponse = JSON.parse(responseBody);
        const mediaId = jsonResponse.id;
        const mediaUrl = jsonResponse.source_url || (jsonResponse.guid && jsonResponse.guid.rendered ? jsonResponse.guid.rendered : null);

        if (mediaId && mediaUrl) {
           Logger.log(`${funcName}: SUCCESS! Uploaded "${fileName}". Media ID: ${mediaId}, URL: ${mediaUrl}`);
           return { id: mediaId, url: mediaUrl };
        } else {
           Logger.log(`${funcName}: WARNING - Upload OK (201) but 'id' or 'source_url' missing for "${fileName}". Response: ${responseBody.substring(0, 500)}...`);
           return null;
        }
    } catch (jsonError) {
        Logger.log(`${funcName}: ERROR parsing successful (201) JSON response for "${fileName}": ${jsonError}`);
        Logger.log(`Response Body was: ${responseBody}`);
        return null;
    }
  } else {
    Logger.log(`${funcName}: FAILED to upload "${fileName}" (ID: ${fileId}). Code: ${responseCode}.`);
    Logger.log(`Response Body: ${responseBody.substring(0, 1000)}...`);
     try {
         const errorJson = JSON.parse(responseBody);
         Logger.log(`WP API Error Details: Code: ${errorJson.code || 'N/A'}, Message: ${errorJson.message || 'No message provided.'}`);
     } catch (e) {
         Logger.log(`${funcName}: Could not parse error response body as JSON.`);
     }
    return null;
  }
}


// ========================================================================
// Helper Function: Generate HTML using Gemini API
// ========================================================================
/**
 * Calls the Gemini API to generate content based on a prompt.
 * @param {string} prompt The prompt for Gemini.
 * @param {string} apiKey The Gemini API key.
 * @return {string|null} The generated HTML content, or null on failure.
 */
function generateHtmlWithGemini(prompt, apiKey) {
  const funcName = "generateHtmlWithGemini";
  if (!prompt || !apiKey) { Logger.log(`${funcName}: ERROR - Missing prompt or API Key.`); return null; }

  const apiUrlWithKey = `${GEMINI_API_ENDPOINT}?key=${apiKey}`;
  Logger.log(`${funcName}: Calling Gemini API endpoint: ${GEMINI_API_ENDPOINT.split('?')[0]}...`);

  const payload = {
      contents: [{ parts: [{ text: prompt }] }],
      generationConfig: {
        "responseMimeType": "text/plain",
        "maxOutputTokens": 8192,
        "temperature": 0.4
      },
      safetySettings: [
         { "category": "HARM_CATEGORY_HARASSMENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
         { "category": "HARM_CATEGORY_HATE_SPEECH", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
         { "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" },
         { "category": "HARM_CATEGORY_DANGEROUS_CONTENT", "threshold": "BLOCK_MEDIUM_AND_ABOVE" }
      ]
  };

  const options = {
      method: 'post',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true,
      escaping: false
  };

  let response, responseCode, responseBody;
  const MAX_RETRIES = 2;
  let attempt = 0;

  while (attempt <= MAX_RETRIES) {
      attempt++;
      try {
          Logger.log(`${funcName}: Attempt ${attempt} to fetch from Gemini API...`);
          response = UrlFetchApp.fetch(apiUrlWithKey, options);
          responseCode = response.getResponseCode();
          responseBody = response.getContentText();

          if (responseCode === 200) break;
          if (responseCode === 429 || responseCode === 500 || responseCode === 503) {
              Logger.log(`${funcName}: Received status ${responseCode}. Retrying after delay...`);
              if (attempt <= MAX_RETRIES) Utilities.sleep(Math.pow(2, attempt) * 1000 + Math.random() * 1000);
          } else {
              Logger.log(`${funcName}: Received non-retryable status ${responseCode}.`);
              break;
          }
      } catch (fetchError) {
          Logger.log(`${funcName}: EXCEPTION during fetch (Attempt ${attempt}): ${fetchError}`);
          if (attempt > MAX_RETRIES) return null;
          Utilities.sleep(Math.pow(2, attempt) * 1000 + Math.random() * 1000);
      }
  }

  if (responseCode === 200) {
      try {
          const jsonResponse = JSON.parse(responseBody);
          if (jsonResponse.promptFeedback && jsonResponse.promptFeedback.blockReason) {
              Logger.log(`${funcName}: ERROR - Gemini content generation blocked. Reason: ${jsonResponse.promptFeedback.blockReason}`);
              return null;
          }
          if (jsonResponse.candidates && jsonResponse.candidates.length > 0 &&
              jsonResponse.candidates[0].content && jsonResponse.candidates[0].content.parts &&
              jsonResponse.candidates[0].content.parts.length > 0 && jsonResponse.candidates[0].content.parts[0].text)
          {
              let generatedText = jsonResponse.candidates[0].content.parts[0].text;
              const finishReason = jsonResponse.candidates[0].finishReason || 'N/A';
              Logger.log(`${funcName}: Gemini API call successful. Finish Reason: ${finishReason}`);
              if (finishReason === 'MAX_TOKENS') Logger.log(`${funcName}: WARNING - Output truncated (MAX_TOKENS).`);
              else if (finishReason === 'SAFETY') Logger.log(`${funcName}: WARNING - Output stopped due to SAFETY.`);
              else if (finishReason !== 'STOP' && finishReason !== 'N/A') Logger.log(`${funcName}: WARNING - Unusual finish reason: ${finishReason}.`);

              generatedText = generatedText.trim();
              if (generatedText.startsWith('```html')) generatedText = generatedText.substring(7).trim();
              else if (generatedText.startsWith('```')) generatedText = generatedText.substring(3).trim();
              if (generatedText.endsWith('```')) generatedText = generatedText.substring(0, generatedText.length - 3).trim();
              return generatedText;
          } else {
              Logger.log(`${funcName}: ERROR - Gemini response structure unexpected.`);
              Logger.log(`Response Body: ${responseBody.substring(0, 1000)}...`);
              return null;
          }
      } catch (jsonError) {
          Logger.log(`${funcName}: ERROR parsing successful (200) JSON response: ${jsonError}`);
          Logger.log(`Response Body was: ${responseBody}`);
          return null;
      }
  } else {
      Logger.log(`${funcName}: ERROR - Gemini API call failed. Final Code: ${responseCode}`);
      Logger.log(`Response Body: ${responseBody.substring(0, 1000)}...`);
       try {
           const errorJson = JSON.parse(responseBody);
           Logger.log(`Gemini API Error Details: Code: ${errorJson.error && errorJson.error.code || 'N/A'}, Message: ${errorJson.error && errorJson.error.message || 'No message provided.'}`);
       } catch (e) {
           Logger.log(`${funcName}: Could not parse error response body as JSON.`);
       }
      return null;
  }
}


// ========================================================================
// Helper Function: Create WordPress CPT Post
// ========================================================================
/**
 * Creates a new CPT post in WordPress.
 * @param {Object} contentData Object containing {title, content, status}.
 * @param {string} postType The slug for the CPT.
 * @param {Object} headers WP Authentication headers.
 * @param {string} wordpressUrl The WordPress site URL.
 * @return {number|null} The ID of the new post, or null on failure.
 */
function createWordPressCPTPost(contentData, postType, headers, wordpressUrl) {
  const funcName = "createWordPressCPTPost";
  if (!contentData || !contentData.title || !postType || !headers || !headers.Authorization || !wordpressUrl) {
      Logger.log(`${funcName}: ERROR - Missing required parameters.`); return null;
  }
  if (!contentData.content) contentData.content = '';
  if (!contentData.status) contentData.status = 'draft';

  const apiUrl = `${wordpressUrl.replace(/\/$/, '')}/wp-json/wp/v2/${postType}`;

  const payload = {
      title: contentData.title,
      content: contentData.content,
      status: contentData.status
  };

  const options = {
      method: "post",
      headers: { ...headers, 'Content-Type': 'application/json' },
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
  };

  let payloadString = JSON.stringify(payload);
  if (payloadString.length > 1000) payloadString = `{"title":"${payload.title}","status":"${payload.status}","content":"(Content truncated, length: ${payload.content.length})"}`;
  Logger.log(`${funcName}: Sending payload to ${apiUrl} (for CPT '${postType}'): ${payloadString}`);

  let response, responseCode, responseBody;
  try {
    response = UrlFetchApp.fetch(apiUrl, options);
    responseCode = response.getResponseCode();
    responseBody = response.getContentText();
  } catch (fetchError) {
      Logger.log(`${funcName}: EXCEPTION during fetch for CPT post "${contentData.title}": ${fetchError}`);
      return null;
  }

  if (responseCode === 201) {
    try {
        const jsonResponse = JSON.parse(responseBody);
        const newContentId = jsonResponse.id;
        const contentLink = jsonResponse.link || 'N/A';
        if (newContentId) {
            Logger.log(`${funcName}: SUCCESS! WP CPT post '${postType}' created. ID: ${newContentId}. Link: ${contentLink}`);
            return newContentId;
        } else {
            Logger.log(`${funcName}: WARNING - Creation OK (201) but 'id' missing for CPT post "${contentData.title}". Response: ${responseBody.substring(0, 500)}...`);
            return null;
        }
    } catch (jsonError) {
        Logger.log(`${funcName}: ERROR parsing successful (201) JSON response for CPT post "${contentData.title}": ${jsonError}`);
        Logger.log(`Response Body was: ${responseBody}`);
        return null;
    }
  } else {
    Logger.log(`${funcName}: FAILED to create WP CPT post '${postType}' "${contentData.title}". Code: ${responseCode}.`);
    Logger.log(`Response Body: ${responseBody.substring(0, 1000)}...`);
     try {
         const errorJson = JSON.parse(responseBody);
         Logger.log(`WP API Error Details: Code: ${errorJson.code || 'N/A'}, Message: ${errorJson.message || 'No message provided.'}`);
     } catch (e) {
         Logger.log(`${funcName}: Could not parse error response body as JSON.`);
     }
    return null;
  }
}


// ========================================================================
// Trigger Management Functions (Essential - Keep these)
// ========================================================================
/**
 * Creates a trigger for the onFormSubmit function if one doesn't already exist.
 */
function createFormSubmitTrigger() {
  const funcName = 'onFormSubmit';
  let form;
  try {
      form = FormApp.getActiveForm();
  } catch (e) {
      Logger.log(`ERROR: Could not get active form. Ensure script is bound to a Google Form. Error: ${e}`);
      return;
  }

  let triggerExists = false;
  try {
      const existingTriggers = ScriptApp.getUserTriggers(form);
      existingTriggers.forEach(trigger => {
        if (trigger.getHandlerFunction() === funcName &&
            trigger.getEventType() === ScriptApp.EventType.ON_FORM_SUBMIT &&
            trigger.getTriggerSource() === ScriptApp.TriggerSource.FORMS &&
            trigger.getTriggerSourceId() === form.getId()) {
          triggerExists = true;
          Logger.log(`An ${ScriptApp.EventType.ON_FORM_SUBMIT} trigger for "${funcName}" already exists (ID: ${trigger.getUniqueId()}). No new trigger created.`);
        }
      });
  } catch (e) {
      Logger.log(`ERROR: Could not retrieve existing triggers. Error: ${e}`);
  }

  if (!triggerExists) {
    try {
      ScriptApp.newTrigger(funcName)
        .forForm(form)
        .onFormSubmit()
        .create();
      Logger.log(`Form submit trigger created successfully for "${funcName}".`);
    } catch (error) {
      Logger.log(`ERROR creating trigger for "${funcName}": ${error.message}`);
    }
  }
}

/**
 * Deletes existing triggers associated with the onFormSubmit function for the active form.
 */
function deleteTriggers() {
    const funcName = 'onFormSubmit';
    let form;
    try {
        form = FormApp.getActiveForm();
         if (!form) throw new Error("No active form found.");
    } catch (e) {
        Logger.log(`ERROR: Could not get active form. Ensure script is bound to a Google Form. Error: ${e}`);
        return;
    }

    let triggers;
    try {
        triggers = ScriptApp.getUserTriggers(form);
    } catch (e) {
        Logger.log(`ERROR: Could not retrieve existing triggers. Error: ${e}`);
        return;
    }

    let deletedCount = 0;
    Logger.log(`Searching for triggers matching Handler: ${funcName}, Type: ${ScriptApp.EventType.ON_FORM_SUBMIT}, Source: ${ScriptApp.TriggerSource.FORMS}...`);

    triggers.forEach(trigger => {
        try {
            if (trigger.getHandlerFunction() === funcName &&
                trigger.getEventType() === ScriptApp.EventType.ON_FORM_SUBMIT &&
                trigger.getTriggerSource() === ScriptApp.TriggerSource.FORMS &&
                trigger.getTriggerSourceId() === form.getId()) {

                const triggerId = trigger.getUniqueId();
                Logger.log(`Found matching trigger: ${triggerId}. Attempting deletion...`);
                ScriptApp.deleteTrigger(trigger);
                Logger.log(`Deleted trigger: ${triggerId}`);
                deletedCount++;
            }
        } catch (err) {
            Logger.log(`ERROR: Failed to delete trigger ${trigger.getUniqueId()}: ${err.message}`);
        }
    });

     if (deletedCount > 0) {
         Logger.log(`Trigger deletion process complete. Deleted ${deletedCount} trigger(s) associated with '${funcName}' for this form.`);
     } else {
         Logger.log(`No matching triggers found for '${funcName}' on this form to delete.`);
     }
}

// ========================================================================
// End of Script
// ========================================================================
